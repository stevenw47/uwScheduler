{"version":3,"sources":["components/common/types.ts","components/common/TextInput/TextInput.tsx","hooks/useCoursesInfo.ts","utils/numbers.ts","components/Scheduler/Calendar/CalendarDay/CalendarDay.tsx","components/Scheduler/Calendar/Calendar.tsx","components/common/CheckboxInput/CheckboxInput.tsx","components/Scheduler/Options/Options.tsx","constants/colors.ts","components/Scheduler/Scheduler.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Weekdays","WeekdaysAbbreviated","TextInput","props","className","type","timeByColonReg","processTime","timeByColon","match","exec","Number","Math","round","Error","weekdaysShortReg","processWeekdays","weekdaysShort","processCourseInfo","courseInfo","length","subject","catalog_number","title","note","processedClasses","course","classes","class_number","section","date","location","instructors","push","classNumber","startTime","start_time","endTime","end_time","weekdays","catalogNumber","sections","courseReg","isBetween","num","left","right","leftClosed","rightClosed","result","numOverlap","_class","count","c","CalendarDay","day","even","colors","timeBlocks","map","style","background","key","index","top","START_TIME","filter","indexOf","overlapOrder","width","height","timeBlock","Calendar","classesInfo","classesEnabledFlags","classesColors","classesByWeekday","Monday","Tuesday","Wednesday","Thursday","Friday","i","classInfo","weekday","hour","floor","minute","formattedStartTime","Object","values","CheckboxInput","labelText","Options","coursesInfo","setClassEnabled","classIndex","includes","currentClassIndex","color","checked","onChange","event","canadianColorPalette","colorPalette","all","dark","slice","light","Scheduler","term","courseNames","useState","setCoursesInfo","useEffect","getCourseInfo","courseName","a","fetch","res","console","log","process","json","resJson","data","newCoursesInfo","fetchData","useCoursesInfo","coursesList","setClassesInfo","setClassesEnabledFlags","setClassesColors","entries","courseIndex","courseInfoWithoutSections","enabled","newClassesEnabledFlags","Home","coursesInputString","setCoursesInputString","setCoursesList","handleChange","useCallback","target","value","handleKeyPress","replace","split","autoFocus","placeholder","onKeyPress","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0194d6f6.chunk.js","sourcesContent":["export enum Weekdays {\n  Monday = 'Monday',\n  Tuesday = 'Tuesday',\n  Wednesday = 'Wednesday',\n  Thursday = 'Thursday',\n  Friday = 'Friday',\n}\nexport enum WeekdaysAbbreviated {\n  Monday = 'M',\n  Tuesday = 'T',\n  Wednesday = 'W',\n  Thursday = 'Th',\n  Friday = 'F',\n}\n\n// this is the shape of the returned data, after fetching from the API\nexport interface CourseInfo {\n  subject: string;\n  catalogNumber: string;\n  title: string;\n  note: string | null;\n  sections: SectionInfo[];\n}\nexport interface SectionInfo {\n  classNumber: number;\n  section: string;\n  date: {\n    startTime: number;\n    endTime: number;\n    weekdays: WeekdaysAbbreviated[];\n  };\n  location: string;\n  instructors: string[];\n}\n\n// for a single course (KOREA101R) , it has a list of sections associated to it (LEC001, LEC002, TUT101, TUT102, TUT103)\n// if we take only a single section from it, we get a class\nexport interface ClassInfo extends Omit<CourseInfo, 'sections'> {\n  section: SectionInfo;\n}\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\nimport './TextInput.scss';\n\ninterface TextInputProps\n  extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {}\n\nexport const TextInput: FunctionComponent<TextInputProps> = props => {\n  return (\n    <div className=\"uw-scheduler-field\">\n      <input className=\"uw-scheduler-text-input\" type=\"text\" {...props} />\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { CourseInfo, WeekdaysAbbreviated } from 'components/common/types';\n\nconst timeByColonReg = /(\\d\\d):(\\d\\d)/;\n\n// time is like XX:XX, 24 hour time\nconst processTime = (timeByColon: string) => {\n  const match = timeByColonReg.exec(timeByColon);\n  if (match) {\n    const hour = Number(match[1]);\n    const minute = Math.round((Number(match[2]) / 60) * 100);\n    return hour + minute / 100;\n  }\n  throw Error(`Invalid timeByColon ${timeByColon}`);\n};\n\nconst weekdaysShortReg = /([A-Z][a-z]?)/g;\n\n// weekdaysShort is like 'TTh'\nconst processWeekdays = (weekdaysShort: string) => {\n  const match = weekdaysShort.match(weekdaysShortReg);\n  if (match) {\n    return match;\n  }\n  throw Error(`Invalid weekdaysShort ${weekdaysShort}`);\n};\n\n// courseInfo is from the uwaterloo api\n// TODO: the variables are named badly...\n// const processCourseInfo = (courseInfo: courseInfoType): CourseInfo => {\nconst processCourseInfo = (courseInfo: any): CourseInfo => {\n  if (!courseInfo.length) {\n    throw Error(`Expected ${courseInfo} to be an array of size at least 1.`);\n  }\n\n  // TODO:\n  // these should be the same for each course\n  // we can check and if not, do some error\n  const { subject, catalog_number, title, note } = courseInfo[0];\n\n  const processedClasses = [];\n\n  for (const course of courseInfo) {\n    if (course.classes.length !== 1) {\n      throw Error(`Expected ${course.classes} to be an array of size 1.`);\n    }\n\n    const { class_number, section } = course;\n\n    const classes = course.classes[0];\n\n    const { date, location, instructors } = classes;\n\n    processedClasses.push({\n      classNumber: class_number,\n      section,\n      date: {\n        startTime: processTime(date.start_time),\n        endTime: processTime(date.end_time),\n        weekdays: processWeekdays(date.weekdays) as WeekdaysAbbreviated[],\n      },\n      location,\n      instructors,\n    });\n  }\n\n  return {\n    subject,\n    catalogNumber: catalog_number,\n    title,\n    note,\n    sections: processedClasses,\n  };\n};\n\nconst courseReg = /([a-z]+)([\\d].+)/i;\n\n// TODO: use type for courseNames\nexport const useCoursesInfo = (term: number, courseNames: string[]) => {\n  // http://www.adm.uwaterloo.ca/cgi-bin/cgiwrap/infocour/salook.pl?level=under&sess=1205&subject=CO&cournum=454\n\n  const [coursesInfo, setCoursesInfo] = useState<any[] | null>(null);\n\n  useEffect(() => {\n    // TODO: handle errors in these things\n\n    const getCourseInfo = async (courseName: string) => {\n      const match = courseReg.exec(courseName);\n\n      if (match) {\n        const subject = match[1];\n        const catalogNumber = match[2];\n        const res = await fetch(\n          `http://localhost:5000/course?term=${term}&subject=${subject}&catalogNumber=${catalogNumber}`,\n        );\n        console.log(process.env);\n        const resJson = await res.json();\n        const data = resJson.data;\n        return data;\n      }\n      throw Error(`Invalid courseName ${courseName}`);\n    };\n\n    async function fetchData() {\n      const newCoursesInfo = [];\n      for (const courseName of courseNames) {\n        const courseInfo = await getCourseInfo(courseName);\n        newCoursesInfo.push(processCourseInfo(courseInfo));\n      }\n      setCoursesInfo(newCoursesInfo);\n    }\n    fetchData();\n  }, [term, courseNames]);\n\n  return coursesInfo;\n};\n\nlet temp = [\n  [\n    {\n      subject: 'CO',\n      catalog_number: '342',\n      units: 0.5,\n      title: 'Introduction to Graph Theory',\n      note: null,\n      class_number: 3641,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 75,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '10:00',\n            end_time: '11:20',\n            weekdays: 'TTh',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'PHY',\n            room: '313',\n          },\n          instructors: ['Haxell,Penny'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CO',\n      catalog_number: '351',\n      units: 0.5,\n      title: 'Network Flow Theory',\n      note: null,\n      class_number: 3642,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 75,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '11:30',\n            end_time: '12:20',\n            weekdays: 'MWF',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '2038',\n          },\n          instructors: ['Pei,Martin'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CO',\n      catalog_number: '454',\n      units: 0.5,\n      title: 'Scheduling',\n      note: null,\n      class_number: 3643,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '10:00',\n            end_time: '11:20',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '4064',\n          },\n          instructors: ['Cheriyan,Joseph'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'PMATH',\n      catalog_number: '336',\n      units: 0.5,\n      title: 'Introduction to Group Theory with Applications',\n      note: null,\n      class_number: 3627,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '08:30',\n            end_time: '09:20',\n            weekdays: 'MWF',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '4021',\n          },\n          instructors: ['Madill,Blake'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:43-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 3659,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: '101',\n      related_component_2: null,\n      enrollment_capacity: 60,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '11:30',\n            end_time: '12:50',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'RCH',\n            room: '308',\n          },\n          instructors: ['Lau,Lap Chi'],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 5365,\n      section: 'LEC 002',\n      campus: 'UW U',\n      associated_class: 2,\n      related_component_1: '101',\n      related_component_2: null,\n      enrollment_capacity: 60,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '13:00',\n            end_time: '14:20',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'RCH',\n            room: '308',\n          },\n          instructors: ['Lau,Lap Chi'],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 4079,\n      section: 'TST 101',\n      campus: 'UW U',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 120,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '19:00',\n            end_time: '20:50',\n            weekdays: 'W',\n            start_date: '06/17',\n            end_date: '06/17',\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: null,\n            room: null,\n          },\n          instructors: [],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4117,\n      section: 'LEC 001',\n      campus: 'REN R',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '13:00',\n            end_time: '14:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kim,Young Gon'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4132,\n      section: 'LEC 002',\n      campus: 'REN R',\n      associated_class: 2,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '14:30',\n            end_time: '15:50',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kim,Young Gon'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4140,\n      section: 'TUT 101',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '16:00',\n            end_time: '17:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kang,Youngoak'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4141,\n      section: 'TUT 102',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '16:00',\n            end_time: '17:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2102',\n          },\n          instructors: ['Cho,Grace'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4142,\n      section: 'TUT 103',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '18:00',\n            end_time: '19:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2102',\n          },\n          instructors: ['Kim,Wonhee'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n  ],\n];\n\ntype courseInfoType = typeof temp[0];\n","// checks if num is between left and right (with optional boundary conditions)\nexport const isBetween = (\n  num: number,\n  left: number,\n  right: number,\n  leftClosed = true,\n  rightClosed = true,\n) => {\n  let result = true;\n  if (leftClosed) {\n    result = result && left <= num;\n  } else {\n    result = result && left < num;\n  }\n  if (rightClosed) {\n    result = result && num <= right;\n  } else {\n    result = result && num < right;\n  }\n  return result;\n};\n","import React, { FunctionComponent } from 'react';\nimport './CalendarDay.scss';\nimport { isBetween } from 'utils/numbers';\nimport { Weekdays, ClassInfo } from 'components/common/types';\nimport { timeBlocks, START_TIME } from '../Calendar';\n\ninterface CalendarDayProps {\n  day: Weekdays;\n  even: boolean;\n  classes: ClassInfo[];\n  colors: string[];\n}\n\nconst overlapOrder = (classes: ClassInfo[], _class: ClassInfo) => {\n  const { startTime, endTime } = _class.section.date;\n\n  classes = classes.filter(\n    c =>\n      isBetween(startTime, c.section.date.startTime, c.section.date.endTime) ||\n      isBetween(endTime, c.section.date.startTime, c.section.date.endTime),\n  );\n  return classes.indexOf(_class) + 1;\n};\n\nconst numOverlap = (classes: ClassInfo[], _class: ClassInfo) => {\n  const { startTime, endTime } = _class.section.date;\n  let count = 0;\n  for (const c of classes) {\n    // c.date.startTime < startTime < c.date.endTime\n    if (\n      isBetween(startTime, c.section.date.startTime, c.section.date.endTime) ||\n      isBetween(endTime, c.section.date.startTime, c.section.date.endTime)\n    ) {\n      ++count;\n    }\n  }\n  return count;\n};\n\nexport const CalendarDay: FunctionComponent<CalendarDayProps> = ({\n  day,\n  even,\n  classes,\n  colors,\n}) => {\n  return (\n    <div className=\"calendar-day\">\n      <div className=\"calendar-day-underlay-container\">\n        {timeBlocks.map(({ startTime, endTime }) => {\n          const style = {\n            background:\n              startTime % 1 === 0\n                ? even\n                  ? 'rgba(0,0,0,0.2)'\n                  : 'rgba(0,0,0,0.0)'\n                : 'rgba(0,0,0,0.3)',\n          };\n          return (\n            <div\n              key={`${startTime}-${endTime}`}\n              className=\"calendar-day-underlay\"\n              style={style}\n            />\n          );\n        })}\n      </div>\n      <div className=\"calendar-day-classes-container\">\n        {classes.map((_class: ClassInfo, index: number) => {\n          const section = _class.section;\n          const top = `${(section.date.startTime - START_TIME) * 2 * 25}px`;\n          const left = `${100 -\n            overlapOrder(classes, _class) *\n              (100 / numOverlap(classes, _class))}%`;\n          const width = `${100 / numOverlap(classes, _class)}%`;\n          const height = `${(section.date.endTime - section.date.startTime) *\n            2 *\n            25}px`;\n          const style = {\n            top,\n            left,\n            width,\n            height,\n            background: colors[index],\n          };\n          return (\n            <div\n              className=\"calendar-day-class\"\n              key={section.classNumber}\n              style={style}\n            >\n              {`${_class.subject}${_class.catalogNumber}`}\n              <br />\n              {`${section.section}`}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './Calendar.scss';\nimport { CalendarDay } from './CalendarDay/CalendarDay';\nimport {\n  WeekdaysAbbreviated,\n  Weekdays,\n  ClassInfo,\n} from 'components/common/types';\n\nexport const START_TIME = 8.5; // 8:30am\nexport const END_TIME = 21; // 9:00pm\nexport const INTERVAL_LENGTH = 0.5; // 30 minute intervals\n\ninterface TimeBlock {\n  startTime: number;\n  endTime: number;\n}\n\nexport const timeBlocks: TimeBlock[] = [];\n\nconst timeBlock = {\n  startTime: START_TIME,\n  endTime: START_TIME + INTERVAL_LENGTH,\n};\nwhile (timeBlock.endTime <= END_TIME) {\n  timeBlocks.push({ ...timeBlock });\n  timeBlock.startTime += INTERVAL_LENGTH;\n  timeBlock.endTime += INTERVAL_LENGTH;\n}\n\ninterface CalendarProps {\n  classesInfo: ClassInfo[];\n  classesEnabledFlags: boolean[];\n  classesColors: string[]; // TODO: i should type this as Color or something\n}\n\nexport const Calendar: FunctionComponent<CalendarProps> = ({\n  classesInfo,\n  classesEnabledFlags,\n  classesColors,\n}) => {\n  const classesByWeekday: {\n    [key in WeekdaysAbbreviated]: {\n      classesInfo: ClassInfo[];\n      colors: string[];\n    };\n  } = {\n    [WeekdaysAbbreviated.Monday]: { classesInfo: [], colors: [] },\n    [WeekdaysAbbreviated.Tuesday]: { classesInfo: [], colors: [] },\n    [WeekdaysAbbreviated.Wednesday]: { classesInfo: [], colors: [] },\n    [WeekdaysAbbreviated.Thursday]: { classesInfo: [], colors: [] },\n    [WeekdaysAbbreviated.Friday]: { classesInfo: [], colors: [] },\n  };\n\n  // next, sort them into their bucket by weekday\n  for (let i = 0; i < classesInfo.length; ++i) {\n    const classInfo = classesInfo[i];\n    if (classesEnabledFlags[i]) {\n      for (const weekday of classInfo.section.date.weekdays) {\n        classesByWeekday[weekday].classesInfo.push(classInfo);\n        classesByWeekday[weekday].colors.push(classesColors[i]);\n      }\n    }\n  }\n\n  const style = {\n    height: `calc(25px * 25)`,\n  };\n  return (\n    <div className=\"calendar\" style={style}>\n      <div className=\"calendar-time-container\">\n        {timeBlocks.map(({ startTime, endTime }) => {\n          const hour = Math.floor(startTime / 1);\n          const minute = startTime % 1 !== 0 ? (startTime % 1) * 60 : '00';\n          const formattedStartTime =\n            hour <= 12\n              ? `${hour}:${minute} ${hour < 12 ? 'AM' : 'PM'}`\n              : `${hour % 12}:${minute} PM`;\n          return (\n            <div key={startTime} className=\"calendar-time\">\n              <div className=\"calendar-time-tick\" />\n              <span>{formattedStartTime}</span>\n            </div>\n          );\n        })}\n      </div>\n      {Object.values(Weekdays).map((day, index) => {\n        return (\n          <CalendarDay\n            key={day}\n            day={day}\n            even={index % 2 === 0}\n            classes={classesByWeekday[WeekdaysAbbreviated[day]].classesInfo}\n            colors={classesByWeekday[WeekdaysAbbreviated[day]].colors}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\nimport './CheckboxInput.scss';\n\n// TODO: not sure\ninterface CheckboxInput\n  extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {\n  labelText?: string;\n}\n\nexport const CheckboxInput: FunctionComponent<CheckboxInput> = ({\n  labelText,\n  ...props\n}) => {\n  return (\n    <div className=\"uw-scheduler-field\">\n      <input\n        className=\"uw-scheduler-checkbox-input\"\n        type=\"checkbox\"\n        {...props}\n      />\n      {labelText ?? null}\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './Options.scss';\nimport { CheckboxInput } from 'components/common/CheckboxInput/CheckboxInput';\nimport { CourseInfo } from 'components/common/types';\n\ninterface OptionsProps {\n  coursesInfo: CourseInfo[];\n  classesEnabledFlags: boolean[];\n  setClassEnabled: (classIndex: number, enabled: boolean) => void;\n  classesColors: string[];\n}\n\nexport const Options: FunctionComponent<OptionsProps> = ({\n  coursesInfo,\n  classesEnabledFlags,\n  setClassEnabled,\n  classesColors,\n}) => {\n  let classIndex = 0;\n  return (\n    <div className=\"options\">\n      {coursesInfo.map(courseInfo => {\n        return (\n          <div\n            key={`${courseInfo.subject}${courseInfo.catalogNumber}`}\n            className=\"options-course\"\n          >\n            <div className=\"options-course-title\">\n              {`${courseInfo.subject}${courseInfo.catalogNumber}`}\n            </div>\n            <div className=\"options-course-sections\">\n              {courseInfo.sections.map(section => {\n                // filter out TST since we don't really care about those\n                // also otherwise the number of courses will be off from the parent\n                // TODO: filter out TST at the very beginning or something?\n                if (!section.section.includes('TST')) {\n                  const currentClassIndex = classIndex;\n                  ++classIndex;\n                  const handleChange = (\n                    event: React.ChangeEvent<HTMLInputElement>,\n                  ) => {\n                    setClassEnabled(\n                      currentClassIndex,\n                      !classesEnabledFlags[currentClassIndex],\n                    );\n                  };\n                  return (\n                    <div\n                      key={section.classNumber}\n                      style={{ color: classesColors[currentClassIndex] }}\n                    >\n                      <CheckboxInput\n                        labelText={`${section.section} ${section.instructors}`}\n                        checked={classesEnabledFlags[currentClassIndex]}\n                        onChange={handleChange}\n                      />\n                    </div>\n                  );\n                }\n                return null;\n              })}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","const canadianColorPalette = [\n  'rgb(255, 159, 243)',\n  'rgb(254, 202, 87)',\n  'rgb(255, 107, 107)',\n  'rgb(72, 219, 251)',\n  'rgb(29, 209, 161)',\n  'rgb(243, 104, 224)',\n  'rgb(255, 159, 67)',\n  'rgb(238, 82, 83)',\n  'rgb(10, 189, 227)',\n  'rgb(16, 172, 132)',\n  'rgb(0, 210, 211)',\n  'rgb(84, 160, 255)',\n  'rgb(95, 39, 205)',\n  'rgb(200, 214, 229)',\n  'rgb(87, 101, 116)',\n  'rgb(1, 163, 164)',\n  'rgb(46, 134, 222)',\n  'rgb(52, 31, 151)',\n  'rgb(131, 149, 167)',\n  'rgb(34, 47, 62)',\n];\n\n// palette is from https://flatuicolors.com/palette/ca\n// store div containing the colors as a global variable\n// copy([...temp1.children].map(x => x.style.background))\nexport const colorPalette = {\n  all: canadianColorPalette,\n  dark: [\n    ...canadianColorPalette.slice(5, 10),\n    ...canadianColorPalette.slice(15, 20),\n  ],\n  light: [\n    ...canadianColorPalette.slice(0, 5),\n    ...canadianColorPalette.slice(10, 15),\n  ],\n};\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { useCoursesInfo } from 'hooks/useCoursesInfo';\nimport { Calendar } from './Calendar/Calendar';\nimport './Scheduler.scss';\nimport { ClassInfo } from 'components/common/types';\nimport { Options } from './Options/Options';\nimport { colorPalette } from 'constants/colors';\n\ntype CourseName = string;\n\ninterface SchedulerProps {\n  coursesList: CourseName[];\n}\n\nexport const Scheduler: FunctionComponent<SchedulerProps> = ({\n  coursesList,\n}) => {\n  // TODO: have input for term?\n  const coursesInfo = useCoursesInfo(1205, coursesList);\n  console.log(coursesInfo);\n  // const coursesInfo = MOCK_DATA as any;\n\n  const [classesInfo, setClassesInfo] = useState<ClassInfo[] | null>(null);\n  const [classesEnabledFlags, setClassesEnabledFlags] = useState<\n    boolean[] | null\n  >(null);\n  const [classesColors, setClassesColors] = useState<string[] | null>(null);\n\n  useEffect(() => {\n    if (coursesInfo) {\n      const classesInfo: ClassInfo[] = [];\n      const classesEnabledFlags: boolean[] = [];\n      const classesColors: string[] = [];\n\n      // first, flatten coursesInfo into classesInfo\n      for (const [courseIndex, courseInfo] of coursesInfo.entries()) {\n        const { sections, ...courseInfoWithoutSections } = courseInfo;\n        for (const section of sections) {\n          // filter out TST since we don't really care about those\n          if (!section.section.includes('TST')) {\n            classesInfo.push({\n              ...courseInfoWithoutSections,\n              section: section,\n            });\n            classesEnabledFlags.push(true);\n            // if (section.section.includes('LEC')) {\n            //   classesColors.push(\n            //     colorPalette.dark[courseIndex % colorPalette.dark.length],\n            //   );\n            // } else {\n            //   classesColors.push(\n            //     colorPalette.light[courseIndex % colorPalette.light.length],\n            //   );\n            // }\n            classesColors.push(\n              colorPalette.light[courseIndex % colorPalette.light.length],\n            );\n          }\n        }\n      }\n      setClassesInfo(classesInfo);\n      setClassesEnabledFlags(classesEnabledFlags);\n      setClassesColors(classesColors);\n    }\n  }, [coursesInfo]);\n\n  const setClassEnabled = (classIndex: number, enabled: boolean) => {\n    if (classesEnabledFlags) {\n      const newClassesEnabledFlags = [...classesEnabledFlags];\n      newClassesEnabledFlags[classIndex] = enabled;\n      setClassesEnabledFlags(newClassesEnabledFlags);\n    }\n  };\n\n  return (\n    <div className=\"scheduler\">\n      <div className=\"calendar-container\">\n        {classesInfo && classesEnabledFlags && classesColors && (\n          <Calendar\n            classesInfo={classesInfo}\n            classesEnabledFlags={classesEnabledFlags}\n            classesColors={classesColors}\n          />\n        )}\n      </div>\n      <div className=\"options-container\">\n        {coursesInfo && classesEnabledFlags && classesColors && (\n          <Options\n            coursesInfo={coursesInfo}\n            classesEnabledFlags={classesEnabledFlags}\n            setClassEnabled={setClassEnabled}\n            classesColors={classesColors}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst MOCK_DATA = [\n  {\n    subject: 'CS',\n    catalogNumber: '466',\n    title: 'Algorithm Design and Analysis',\n    note: null,\n    sections: [\n      {\n        classNumber: 3659,\n        section: 'LEC 001',\n        date: {\n          startTime: 11.5,\n          endTime: 12.83,\n          weekdays: ['M', 'W'],\n        },\n        location: {\n          building: 'RCH',\n          room: '308',\n        },\n        instructors: ['Lau,Lap Chi'],\n      },\n      {\n        classNumber: 5365,\n        section: 'LEC 002',\n        date: {\n          startTime: 13,\n          endTime: 14.33,\n          weekdays: ['M', 'W'],\n        },\n        location: {\n          building: 'RCH',\n          room: '308',\n        },\n        instructors: ['Lau,Lap Chi'],\n      },\n      {\n        classNumber: 4079,\n        section: 'TST 101',\n        date: {\n          startTime: 19,\n          endTime: 20.83,\n          weekdays: ['W'],\n        },\n        location: {\n          building: null,\n          room: null,\n        },\n        instructors: [],\n      },\n    ],\n  },\n  {\n    subject: 'CO',\n    catalogNumber: '342',\n    title: 'Introduction to Graph Theory',\n    note: null,\n    sections: [\n      {\n        classNumber: 3641,\n        section: 'LEC 001',\n        date: {\n          startTime: 10,\n          endTime: 11.33,\n          weekdays: ['T', 'Th'],\n        },\n        location: {\n          building: 'PHY',\n          room: '313',\n        },\n        instructors: ['Haxell,Penny'],\n      },\n    ],\n  },\n  {\n    subject: 'CO',\n    catalogNumber: '351',\n    title: 'Network Flow Theory',\n    note: null,\n    sections: [\n      {\n        classNumber: 3642,\n        section: 'LEC 001',\n        date: {\n          startTime: 11.5,\n          endTime: 12.33,\n          weekdays: ['M', 'W', 'F'],\n        },\n        location: {\n          building: 'MC',\n          room: '2038',\n        },\n        instructors: ['Pei,Martin'],\n      },\n    ],\n  },\n  {\n    subject: 'CO',\n    catalogNumber: '454',\n    title: 'Scheduling',\n    note: null,\n    sections: [\n      {\n        classNumber: 3643,\n        section: 'LEC 001',\n        date: {\n          startTime: 10,\n          endTime: 11.33,\n          weekdays: ['M', 'W'],\n        },\n        location: {\n          building: 'MC',\n          room: '4064',\n        },\n        instructors: ['Cheriyan,Joseph'],\n      },\n    ],\n  },\n  {\n    subject: 'PMATH',\n    catalogNumber: '336',\n    title: 'Introduction to Group Theory with Applications',\n    note: null,\n    sections: [\n      {\n        classNumber: 3627,\n        section: 'LEC 001',\n        date: {\n          startTime: 8.5,\n          endTime: 9.33,\n          weekdays: ['M', 'W', 'F'],\n        },\n        location: {\n          building: 'MC',\n          room: '4021',\n        },\n        instructors: ['Madill,Blake'],\n      },\n    ],\n  },\n  {\n    subject: 'KOREA',\n    catalogNumber: '101R',\n    title: 'First-Year Korean 1',\n    note: 'Choose TUT section for Related 1.',\n    sections: [\n      {\n        classNumber: 4117,\n        section: 'LEC 001',\n        date: {\n          startTime: 13,\n          endTime: 14.33,\n          weekdays: ['W'],\n        },\n        location: {\n          building: 'REN',\n          room: '2107',\n        },\n        instructors: ['Kim,Young Gon'],\n      },\n      {\n        classNumber: 4132,\n        section: 'LEC 002',\n        date: {\n          startTime: 14.5,\n          endTime: 15.83,\n          weekdays: ['W'],\n        },\n        location: {\n          building: 'REN',\n          room: '2107',\n        },\n        instructors: ['Kim,Young Gon'],\n      },\n      {\n        classNumber: 4140,\n        section: 'TUT 101',\n        date: {\n          startTime: 16,\n          endTime: 17.33,\n          weekdays: ['W'],\n        },\n        location: {\n          building: 'REN',\n          room: '2107',\n        },\n        instructors: ['Kang,Youngoak'],\n      },\n      {\n        classNumber: 4141,\n        section: 'TUT 102',\n        date: {\n          startTime: 16,\n          endTime: 17.33,\n          weekdays: ['W'],\n        },\n        location: {\n          building: 'REN',\n          room: '2102',\n        },\n        instructors: ['Cho,Grace'],\n      },\n      {\n        classNumber: 4142,\n        section: 'TUT 103',\n        date: {\n          startTime: 18,\n          endTime: 19.33,\n          weekdays: ['W'],\n        },\n        location: {\n          building: 'REN',\n          room: '2102',\n        },\n        instructors: ['Kim,Wonhee'],\n      },\n    ],\n  },\n];\n","import React, { FunctionComponent, useState, useCallback } from 'react';\nimport { TextInput } from 'components/common/TextInput/TextInput';\nimport './Home.scss';\nimport { Scheduler } from 'components/Scheduler/Scheduler';\n\ninterface HomeProps {}\n\nexport const Home: FunctionComponent<HomeProps> = () => {\n  // const [coursesInputString, setCoursesInputString] = useState('');\n  const [coursesInputString, setCoursesInputString] = useState(\n    'CS466, CO342, CO351, CO454, PMATH336, KOREA101R',\n  );\n  const [coursesList, setCoursesList] = useState<string[]>([]);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setCoursesInputString(event.target.value);\n    },\n    [],\n  );\n  const handleKeyPress = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        setCoursesList(coursesInputString.replace(/\\s/g, '').split(','));\n      }\n    },\n    [coursesInputString],\n  );\n\n  // TODO: add an icon on left of search bar, and maybe an submit button on right?\n  return (\n    <div className=\"home\">\n      <div className=\"title\">\n        <h1>uwScheduler</h1>\n      </div>\n      <div className=\"search-bar\">\n        <TextInput\n          value={coursesInputString}\n          autoFocus={true}\n          placeholder={'CS466, CO342, CO351, CO454, PMATH336, KOREA101R'}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n        />\n      </div>\n      <div className=\"search-results\">\n        {coursesList.length && <Scheduler coursesList={coursesList} />}\n      </div>\n    </div>\n  );\n};\n\nlet temp = [\n  [\n    {\n      subject: 'CO',\n      catalog_number: '342',\n      units: 0.5,\n      title: 'Introduction to Graph Theory',\n      note: null,\n      class_number: 3641,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 75,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '10:00',\n            end_time: '11:20',\n            weekdays: 'TTh',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'PHY',\n            room: '313',\n          },\n          instructors: ['Haxell,Penny'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CO',\n      catalog_number: '351',\n      units: 0.5,\n      title: 'Network Flow Theory',\n      note: null,\n      class_number: 3642,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 75,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '11:30',\n            end_time: '12:20',\n            weekdays: 'MWF',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '2038',\n          },\n          instructors: ['Pei,Martin'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CO',\n      catalog_number: '454',\n      units: 0.5,\n      title: 'Scheduling',\n      note: null,\n      class_number: 3643,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '10:00',\n            end_time: '11:20',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '4064',\n          },\n          instructors: ['Cheriyan,Joseph'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'PMATH',\n      catalog_number: '336',\n      units: 0.5,\n      title: 'Introduction to Group Theory with Applications',\n      note: null,\n      class_number: 3627,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '08:30',\n            end_time: '09:20',\n            weekdays: 'MWF',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '4021',\n          },\n          instructors: ['Madill,Blake'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:43-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 3659,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: '101',\n      related_component_2: null,\n      enrollment_capacity: 60,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '11:30',\n            end_time: '12:50',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'RCH',\n            room: '308',\n          },\n          instructors: ['Lau,Lap Chi'],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 5365,\n      section: 'LEC 002',\n      campus: 'UW U',\n      associated_class: 2,\n      related_component_1: '101',\n      related_component_2: null,\n      enrollment_capacity: 60,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '13:00',\n            end_time: '14:20',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'RCH',\n            room: '308',\n          },\n          instructors: ['Lau,Lap Chi'],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 4079,\n      section: 'TST 101',\n      campus: 'UW U',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 120,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '19:00',\n            end_time: '20:50',\n            weekdays: 'W',\n            start_date: '06/17',\n            end_date: '06/17',\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: null,\n            room: null,\n          },\n          instructors: [],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4117,\n      section: 'LEC 001',\n      campus: 'REN R',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '13:00',\n            end_time: '14:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kim,Young Gon'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4132,\n      section: 'LEC 002',\n      campus: 'REN R',\n      associated_class: 2,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '14:30',\n            end_time: '15:50',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kim,Young Gon'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4140,\n      section: 'TUT 101',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '16:00',\n            end_time: '17:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kang,Youngoak'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4141,\n      section: 'TUT 102',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '16:00',\n            end_time: '17:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2102',\n          },\n          instructors: ['Cho,Grace'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4142,\n      section: 'TUT 103',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '18:00',\n            end_time: '19:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2102',\n          },\n          instructors: ['Kim,Wonhee'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n  ],\n];\n\nconst temp2 = [\n  [\n    {\n      subject: 'CO',\n      catalog_number: '342',\n      units: 0.5,\n      title: 'Introduction to Graph Theory',\n      note: null,\n      class_number: 3641,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 75,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '10:00',\n            end_time: '11:20',\n            weekdays: 'TTh',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'PHY',\n            room: '313',\n          },\n          instructors: ['Haxell,Penny'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CO',\n      catalog_number: '351',\n      units: 0.5,\n      title: 'Network Flow Theory',\n      note: null,\n      class_number: 3642,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 75,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '11:30',\n            end_time: '12:20',\n            weekdays: 'MWF',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '2038',\n          },\n          instructors: ['Pei,Martin'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CO',\n      catalog_number: '454',\n      units: 0.5,\n      title: 'Scheduling',\n      note: null,\n      class_number: 3643,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '10:00',\n            end_time: '11:20',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '4064',\n          },\n          instructors: ['Cheriyan,Joseph'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:11-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'PMATH',\n      catalog_number: '336',\n      units: 0.5,\n      title: 'Introduction to Group Theory with Applications',\n      note: null,\n      class_number: 3627,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '08:30',\n            end_time: '09:20',\n            weekdays: 'MWF',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'MC',\n            room: '4021',\n          },\n          instructors: ['Madill,Blake'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:43-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 3659,\n      section: 'LEC 001',\n      campus: 'UW U',\n      associated_class: 1,\n      related_component_1: '101',\n      related_component_2: null,\n      enrollment_capacity: 60,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '11:30',\n            end_time: '12:50',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'RCH',\n            room: '308',\n          },\n          instructors: ['Lau,Lap Chi'],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 5365,\n      section: 'LEC 002',\n      campus: 'UW U',\n      associated_class: 2,\n      related_component_1: '101',\n      related_component_2: null,\n      enrollment_capacity: 60,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '13:00',\n            end_time: '14:20',\n            weekdays: 'MW',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'RCH',\n            room: '308',\n          },\n          instructors: ['Lau,Lap Chi'],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n    {\n      subject: 'CS',\n      catalog_number: '466',\n      units: 0.5,\n      title: 'Algorithm Design and Analysis',\n      note: null,\n      class_number: 4079,\n      section: 'TST 101',\n      campus: 'UW U',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 120,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '19:00',\n            end_time: '20:50',\n            weekdays: 'W',\n            start_date: '06/17',\n            end_date: '06/17',\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: null,\n            room: null,\n          },\n          instructors: [],\n        },\n      ],\n      held_with: ['CS 666'],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:09:18-05:00',\n    },\n  ],\n  [\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4117,\n      section: 'LEC 001',\n      campus: 'REN R',\n      associated_class: 1,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '13:00',\n            end_time: '14:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kim,Young Gon'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4132,\n      section: 'LEC 002',\n      campus: 'REN R',\n      associated_class: 2,\n      related_component_1: null,\n      related_component_2: null,\n      enrollment_capacity: 45,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '14:30',\n            end_time: '15:50',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kim,Young Gon'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4140,\n      section: 'TUT 101',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '16:00',\n            end_time: '17:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2107',\n          },\n          instructors: ['Kang,Youngoak'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4141,\n      section: 'TUT 102',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '16:00',\n            end_time: '17:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2102',\n          },\n          instructors: ['Cho,Grace'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n    {\n      subject: 'KOREA',\n      catalog_number: '101R',\n      units: 0.5,\n      title: 'First-Year Korean 1',\n      note: 'Choose TUT section for Related 1.',\n      class_number: 4142,\n      section: 'TUT 103',\n      campus: 'REN R',\n      associated_class: 99,\n      related_component_1: '99',\n      related_component_2: null,\n      enrollment_capacity: 30,\n      enrollment_total: 0,\n      waiting_capacity: 0,\n      waiting_total: 0,\n      topic: null,\n      reserves: [],\n      classes: [\n        {\n          date: {\n            start_time: '18:00',\n            end_time: '19:20',\n            weekdays: 'W',\n            start_date: null,\n            end_date: null,\n            is_tba: false,\n            is_cancelled: false,\n            is_closed: false,\n          },\n          location: {\n            building: 'REN',\n            room: '2102',\n          },\n          instructors: ['Kim,Wonhee'],\n        },\n      ],\n      held_with: [],\n      term: 1205,\n      academic_level: 'undergraduate',\n      last_updated: '2020-03-07T02:10:03-05:00',\n    },\n  ],\n];\n","import React from 'react';\nimport { Home } from './components/Home/Home';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}